{
  "openapi": "3.0.0",
  "info": {
    "title": "Slussen",
    "version": "0.1.0",
    "description": "# About\n\n**Slussen** is a simplified API gateway to [fastAPI](http://www.fastapi.se).\n\nSlussen currently supports retreiving three kinds of objects from fastAPI version 1:\n\n- **tentants** (fi2partners with partner class id 16)\n- **contracts** (fi2contracts)\n- **rentalobjects** (fi2spatisystems)\n\nThe object types have been renamed to make more sense for integration partners without explicit knowledge of fi2xml.\n\nSlussen uses **JSON** instead of XML. The reason for this is increased operability with different programming languages and platforms, as well as more lightweight parsing (more suitable for mobile platforms).\n\nSlussen uses a simplified filter functionality, both for limiting result sets and including related objects. Instead of the generic query style filters of fastAPI each field or included object has its own query parameter (i.e. \"includetenants=true\").\n\nSome parameters have also been set to \"should work for most\" defaults (for instance page size for queries is set to 5000 instead of 10) to make it easier to get started. These parameters should be reviewed before going to production.\n\n## Getting started\n\nThis API uses JWT for auth. The token should be passed in `Authorization` header to protected routes.\n\nThese routes are useful:\n\n`POST /auth/generate-token` to generate a token. Post this object\n\n```\n{username: 'your username', password: 'your cleartext password'}\n```\n\n`GET /auth/refresh-token` to refresh token\n\n### User creation\n\nYou currently have to create the API users in the database by hand.\n\n`GET /auth/generate-password-hash?password=<cleartext password>` to genererate a salt and hash to write to database when creating a user\n\n### Development tools\n\n`GET /auth/test` to test if a token is valid\n\n## More info\n\nSource code for this project and more info on how to setup your own development environment can be found at https://github.com/Allmannyttans-Digitaliseringsinitiativ/slussen\n",
    "x-logo": {
      "url": "/logo.jpg"
    }
  },
  "basePath": "/",
  "paths": {
    "/tenants": {
      "get": {
        "summary": "Gets all tenants",
        "tags": [
          "Tenants"
        ],
        "description": "Retrieves all tenants in the system. There is currently no way of filtering or doing API-side searches.",
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            },
            "description": "The number of items to skip before starting to collect the result set"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The number of items to return"
          }
        ],
        "security": [
          {
            "BearerAuth": {
              "type": "http",
              "scheme": "bearer",
              "bearerFormat": "JWT"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tenants",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tenant"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/tenants/{id}": {
      "get": {
        "summary": "Gets a tenant by id",
        "tags": [
          "Tenants"
        ],
        "description": "Retrieves a tenant by its id",
        "security": [
          {
            "BearerAuth": {
              "type": "http",
              "scheme": "bearer",
              "bearerFormat": "JWT"
            }
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "tenant id"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the tenant with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No tenant with the specified id exists"
          }
        }
      }
    },
    "/leasecontracts": {
      "get": {
        "summary": "Gets all contracts for rentals",
        "tags": [
          "Lease contracts"
        ],
        "description": "Retrieves all lease contracts for rentals in the system. Currently the only way of finding a contract for a specific tenant is to retrieve all and filter on the client side. API-side filters will be added later on.",
        "parameters": [
          {
            "in": "query",
            "name": "rentalid",
            "description": "Filter for rental IDs, supports simple wildcards (example: rentalid=11*).",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "includeexpired",
            "required": false,
            "description": "If true, expired lease contracts are included in results",
            "default": false
          },
          {
            "in": "query",
            "name": "includetenants",
            "required": false,
            "description": "If true, the full tenant (partner) objects are included as subobjects in each contract",
            "default": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            },
            "description": "The number of items to skip before starting to collect the result set"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The number of items to return"
          },
          {
            "in": "header",
            "name": "authorization",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of contracts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contract"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/leasecontracts/{id}": {
      "get": {
        "summary": "Gets a contract by id",
        "tags": [
          "Lease contracts"
        ],
        "description": "Retrieves a lease contract by its id. Currently the only way of finding a contract for a specific tenant is to retrieve all and filter on the client side. API-side filters will be added later on.",
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "contract id"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the lease contract with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contract"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No contract with the specified id exists"
          }
        }
      }
    },
    "/rentals": {
      "get": {
        "summary": "Gets all rental units",
        "tags": [
          "Rentals"
        ],
        "description": "Retrieves all rental units in the system. There is currently no way of filtering or doing API-side searches.",
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            },
            "description": "The number of items to skip before starting to collect the result set"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The number of items to return"
          }
        ],
        "security": [
          {
            "BearerAuth": {
              "type": "http",
              "scheme": "bearer",
              "bearerFormat": "JWT"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of rental units",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rental"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/rentals/{id}": {
      "get": {
        "summary": "Gets a rental unit by id",
        "tags": [
          "Rentals"
        ],
        "description": "Retrieves a rental unit by its id",
        "security": [
          {
            "BearerAuth": {
              "type": "http",
              "scheme": "bearer",
              "bearerFormat": "JWT"
            }
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "rental id"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the rental unit with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rental"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No rental unit with the specified id exists"
          }
        }
      }
    },
    "/auth/generate-password-hash": {
      "get": {
        "summary": "Generates a salt and hashes the given password using that salt.",
        "tags": [
          "Auth"
        ],
        "description": "Generates a salt and hashes the given password using that salt. Pass cleartext password as query parameter.",
        "parameters": [
          {
            "in": "query",
            "name": "password",
            "required": true,
            "type": "string",
            "description": "The cleartext password that should be hashed"
          }
        ],
        "responses": {
          "200": {
            "description": "Hashed password and salt",
            "schema": {
              "type": "object",
              "properties": {
                "passwordHash": {
                  "type": "string"
                },
                "salt": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/auth/generate-token": {
      "post": {
        "summary": "Generates a jwt",
        "tags": [
          "Auth"
        ],
        "description": "Validates username + password and returns a valid token to be used in authorization header.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A valid token",
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh-token": {
      "get": {
        "summary": "Renews a jwt token",
        "tags": [
          "Auth"
        ],
        "description": "Validates username + password and returns a valid token to be used in authorization header.",
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "security": [
          {
            "BearerAuth": {
              "type": "http",
              "scheme": "bearer",
              "bearerFormat": "JWT"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A valid token",
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/auth/test": {
      "post": {
        "summary": "Verifies an authorization token.",
        "tags": [
          "Auth"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "security": [
          {
            "BearerAuth": {
              "type": "http",
              "scheme": "bearer",
              "bearerFormat": "JWT"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Result of the validation.",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Tenant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "socialSecurityNumber": {
            "type": "string"
          },
          "changedBy": {
            "type": "string"
          },
          "changeDate": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "createDate": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "phoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          },
          "emailAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailAddress"
            }
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "contact": {
            "$ref": "#/components/schemas/Contact"
          },
          "className": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "fullName",
          "className"
        ],
        "additionalProperties": false
      },
      "Address": {
        "type": "object",
        "properties": {
          "guid": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "street": {
            "type": "string"
          },
          "box": {
            "type": "string"
          },
          "co": {
            "type": "string"
          },
          "attention": {
            "type": "string"
          },
          "zipCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          }
        },
        "required": [
          "street",
          "box",
          "co",
          "attention"
        ],
        "additionalProperties": false
      },
      "PhoneNumber": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "number": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "number"
        ],
        "additionalProperties": false
      },
      "EmailAddress": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "address": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "address"
        ],
        "additionalProperties": false
      },
      "Contact": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "phoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          },
          "emailAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailAddress"
            }
          }
        },
        "required": [
          "type",
          "firstName",
          "lastName",
          "fullName"
        ],
        "additionalProperties": false
      },
      "Rental": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "guid": {
            "type": "string"
          },
          "changedBy": {
            "type": "string"
          },
          "changeDate": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "createDate": {
            "type": "string"
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            }
          },
          "areas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Area"
            }
          },
          "name": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          }
        },
        "required": [
          "type",
          "id",
          "changedBy",
          "changeDate",
          "createdBy",
          "createDate",
          "documents",
          "areas",
          "name",
          "fullName",
          "description",
          "addresses"
        ],
        "additionalProperties": false
      },
      "Area": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "measuredBy": {
            "type": "string"
          },
          "measuredDate": {
            "type": "string"
          },
          "measuredType": {
            "type": "string"
          },
          "derivedFrom": {
            "type": "string"
          },
          "perimeter": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "size",
          "status",
          "measuredBy",
          "measuredDate",
          "measuredType",
          "derivedFrom",
          "perimeter"
        ],
        "additionalProperties": false
      },
      "Document": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "link": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "description",
          "link"
        ],
        "additionalProperties": false
      },
      "Contract": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "guid": {
            "type": "string"
          },
          "currentEndDate": {
            "type": "string"
          },
          "changedBy": {
            "type": "string"
          },
          "changeDate": {
            "type": "string"
          },
          "className": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "createDate": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "endingDate": {
            "type": "string"
          },
          "initialDate": {
            "type": "string"
          },
          "noticedBy": {
            "type": "string"
          },
          "noticeStatus": {
            "type": "string"
          },
          "noticeDate": {
            "type": "string"
          },
          "noticeTime": {
            "type": "number"
          },
          "renewalDate": {
            "type": "string"
          },
          "signDate": {
            "type": "string"
          },
          "terminatedDate": {
            "type": "string"
          },
          "terminationReason": {
            "type": "string"
          },
          "partners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractPartner"
            }
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractDocument"
            }
          },
          "rentalObject": {
            "$ref": "#/components/schemas/ContractRentalObject"
          }
        },
        "required": [
          "id",
          "currentEndDate",
          "changedBy",
          "changeDate",
          "className",
          "createdBy",
          "createDate",
          "date",
          "description",
          "endingDate",
          "initialDate",
          "noticedBy",
          "noticeStatus",
          "noticeDate",
          "noticeTime",
          "renewalDate",
          "signDate",
          "terminatedDate",
          "terminationReason",
          "partners",
          "documents",
          "rentalObject"
        ],
        "additionalProperties": false
      },
      "ContractPartner": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "className": {
            "type": "string"
          },
          "roleName": {
            "type": "string"
          },
          "tenant": {
            "$ref": "#/components/schemas/Tenant"
          }
        },
        "required": [
          "id",
          "className",
          "roleName"
        ],
        "additionalProperties": false
      },
      "ContractDocument": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "link": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "description",
          "link"
        ],
        "additionalProperties": false
      },
      "ContractRentalObject": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/RentalType"
          },
          "id": {
            "type": "string"
          },
          "rental": {
            "$ref": "#/components/schemas/Rental"
          }
        },
        "required": [
          "type",
          "id"
        ],
        "additionalProperties": false
      },
      "RentalType": {
        "type": "string",
        "enum": [
          "Rental",
          "Unknown"
        ]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "tags": [
    {
      "name": "Tenants"
    },
    {
      "name": "Lease contracts"
    },
    {
      "name": "Rentals"
    },
    {
      "name": "Auth"
    }
  ]
}